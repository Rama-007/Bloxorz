#include <iostream>
#include <cmath>
#include <fstream>
#include <vector>

#include <glad/glad.h>
#include <GLFW/glfw3.h>

#define GLM_FORCE_RADIANS
#include <glm/glm.hpp>
#include <glm/gtx/transform.hpp>
#include <glm/gtc/matrix_transform.hpp>

using namespace std;

struct VAO {
    GLuint VertexArrayID;
    GLuint VertexBuffer;
    GLuint ColorBuffer;

    GLenum PrimitiveMode;
    GLenum FillMode;
    int NumVertices;
};
typedef struct VAO VAO;

struct GLMatrices {
	glm::mat4 projection;
	glm::mat4 model;
	glm::mat4 view;
	GLuint MatrixID;
} Matrices;

GLuint programID;

string s;
int upflag=0;
float textx=0,texty=0,textz=0,lefttextx=0,lefttexty=0,lefttextz=0;
int blockxpos1=4,blockxpos2=5,blockypos1=4,blockypos2=5,upwardflag=0,upwardflag_flag=0,downflag=0,leftflag=0,rightflag=0,completeflag=0,angle=0,previousangle=0,rightflagrot=0,upflagrot=0;
int leftflagrot=0,leftangle=0;
/* Function to load Shaders - Use it as it is */
GLuint LoadShaders(const char * vertex_file_path,const char * fragment_file_path) {

	// Create the shaders
	GLuint VertexShaderID = glCreateShader(GL_VERTEX_SHADER);
	GLuint FragmentShaderID = glCreateShader(GL_FRAGMENT_SHADER);

	// Read the Vertex Shader code from the file
	std::string VertexShaderCode;
	std::ifstream VertexShaderStream(vertex_file_path, std::ios::in);
	if(VertexShaderStream.is_open())
	{
		std::string Line = "";
		while(getline(VertexShaderStream, Line))
			VertexShaderCode += "\n" + Line;
		VertexShaderStream.close();
	}

	// Read the Fragment Shader code from the file
	std::string FragmentShaderCode;
	std::ifstream FragmentShaderStream(fragment_file_path, std::ios::in);
	if(FragmentShaderStream.is_open()){
		std::string Line = "";
		while(getline(FragmentShaderStream, Line))
			FragmentShaderCode += "\n" + Line;
		FragmentShaderStream.close();
	}

	GLint Result = GL_FALSE;
	int InfoLogLength;

	// Compile Vertex Shader
	printf("Compiling shader : %s\n", vertex_file_path);
	char const * VertexSourcePointer = VertexShaderCode.c_str();
	glShaderSource(VertexShaderID, 1, &VertexSourcePointer , NULL);
	glCompileShader(VertexShaderID);

	// Check Vertex Shader
	glGetShaderiv(VertexShaderID, GL_COMPILE_STATUS, &Result);
	glGetShaderiv(VertexShaderID, GL_INFO_LOG_LENGTH, &InfoLogLength);
	std::vector<char> VertexShaderErrorMessage(InfoLogLength);
	glGetShaderInfoLog(VertexShaderID, InfoLogLength, NULL, &VertexShaderErrorMessage[0]);
	fprintf(stdout, "%s\n", &VertexShaderErrorMessage[0]);

	// Compile Fragment Shader
	printf("Compiling shader : %s\n", fragment_file_path);
	char const * FragmentSourcePointer = FragmentShaderCode.c_str();
	glShaderSource(FragmentShaderID, 1, &FragmentSourcePointer , NULL);
	glCompileShader(FragmentShaderID);

	// Check Fragment Shader
	glGetShaderiv(FragmentShaderID, GL_COMPILE_STATUS, &Result);
	glGetShaderiv(FragmentShaderID, GL_INFO_LOG_LENGTH, &InfoLogLength);
	std::vector<char> FragmentShaderErrorMessage(InfoLogLength);
	glGetShaderInfoLog(FragmentShaderID, InfoLogLength, NULL, &FragmentShaderErrorMessage[0]);
	fprintf(stdout, "%s\n", &FragmentShaderErrorMessage[0]);

	// Link the program
	fprintf(stdout, "Linking program\n");
	GLuint ProgramID = glCreateProgram();
	glAttachShader(ProgramID, VertexShaderID);
	glAttachShader(ProgramID, FragmentShaderID);
	glLinkProgram(ProgramID);

	// Check the program
	glGetProgramiv(ProgramID, GL_LINK_STATUS, &Result);
	glGetProgramiv(ProgramID, GL_INFO_LOG_LENGTH, &InfoLogLength);
	std::vector<char> ProgramErrorMessage( max(InfoLogLength, int(1)) );
	glGetProgramInfoLog(ProgramID, InfoLogLength, NULL, &ProgramErrorMessage[0]);
	fprintf(stdout, "%s\n", &ProgramErrorMessage[0]);

	glDeleteShader(VertexShaderID);
	glDeleteShader(FragmentShaderID);

	return ProgramID;
}

static void error_callback(int error, const char* description)
{
    fprintf(stderr, "Error: %s\n", description);
}

void quit(GLFWwindow *window)
{
    glfwDestroyWindow(window);
    glfwTerminate();
//    exit(EXIT_SUCCESS);
}


/* Generate VAO, VBOs and return VAO handle */
struct VAO* create3DObject (GLenum primitive_mode, int numVertices, const GLfloat* vertex_buffer_data, const GLfloat* color_buffer_data, GLenum fill_mode=GL_FILL)
{
    struct VAO* vao = new struct VAO;
    vao->PrimitiveMode = primitive_mode;
    vao->NumVertices = numVertices;
    vao->FillMode = fill_mode;

    // Create Vertex Array Object
    // Should be done after CreateWindow and before any other GL calls
    glGenVertexArrays(1, &(vao->VertexArrayID)); // VAO
    glGenBuffers (1, &(vao->VertexBuffer)); // VBO - vertices
    glGenBuffers (1, &(vao->ColorBuffer));  // VBO - colors

    glBindVertexArray (vao->VertexArrayID); // Bind the VAO 
    glBindBuffer (GL_ARRAY_BUFFER, vao->VertexBuffer); // Bind the VBO vertices 
    glBufferData (GL_ARRAY_BUFFER, 3*numVertices*sizeof(GLfloat), vertex_buffer_data, GL_STATIC_DRAW); // Copy the vertices into VBO
    glVertexAttribPointer(
                          0,                  // attribute 0. Vertices
                          3,                  // size (x,y,z)
                          GL_FLOAT,           // type
                          GL_FALSE,           // normalized?
                          0,                  // stride
                          (void*)0            // array buffer offset
                          );

    glBindBuffer (GL_ARRAY_BUFFER, vao->ColorBuffer); // Bind the VBO colors 
    glBufferData (GL_ARRAY_BUFFER, 3*numVertices*sizeof(GLfloat), color_buffer_data, GL_STATIC_DRAW);  // Copy the vertex colors
    glVertexAttribPointer(
                          1,                  // attribute 1. Color
                          3,                  // size (r,g,b)
                          GL_FLOAT,           // type
                          GL_FALSE,           // normalized?
                          0,                  // stride
                          (void*)0            // array buffer offset
                          );

    return vao;
}

/* Generate VAO, VBOs and return VAO handle - Common Color for all vertices */
struct VAO* create3DObject (GLenum primitive_mode, int numVertices, const GLfloat* vertex_buffer_data, const GLfloat red, const GLfloat green, const GLfloat blue, GLenum fill_mode=GL_FILL)
{
    GLfloat* color_buffer_data = new GLfloat [3*numVertices];
    for (int i=0; i<numVertices; i++) {
        color_buffer_data [3*i] = red;
        color_buffer_data [3*i + 1] = green;
        color_buffer_data [3*i + 2] = blue;
    }

    return create3DObject(primitive_mode, numVertices, vertex_buffer_data, color_buffer_data, fill_mode);
}

/* Render the VBOs handled by VAO */
void draw3DObject (struct VAO* vao)
{
    // Change the Fill Mode for this object
    glPolygonMode (GL_FRONT_AND_BACK, vao->FillMode);

    // Bind the VAO to use
    glBindVertexArray (vao->VertexArrayID);

    // Enable Vertex Attribute 0 - 3d Vertices
    glEnableVertexAttribArray(0);
    // Bind the VBO to use
    glBindBuffer(GL_ARRAY_BUFFER, vao->VertexBuffer);

    // Enable Vertex Attribute 1 - Color
    glEnableVertexAttribArray(1);
    // Bind the VBO to use
    glBindBuffer(GL_ARRAY_BUFFER, vao->ColorBuffer);

    // Draw the geometry !
    glDrawArrays(vao->PrimitiveMode, 0, vao->NumVertices); // Starting from vertex 0; 3 vertices total -> 1 triangle
}

/**************************
 * Customizable functions *
 **************************/

float triangle_rot_dir = 1;
float rectangle_rot_dir = 1;
bool triangle_rot_status = true;
int rectangle_rot_status = 0,rectangle_next_rot=0,sideflag=0;
int resolverflag=0;

/* Executed when a regular key is pressed/released/held-down */
/* Prefered for Keyboard events */
void keyboard (GLFWwindow* window, int key, int scancode, int action, int mods)
{
     // Function is called first on GLFW_PRESS.

    if (action == GLFW_RELEASE) {
        switch (key) {
            case GLFW_KEY_RIGHT:
            	if(downflag==0 && upwardflag==0&&rightflag==0&&leftflag==0 || completeflag==1)
            	{
                	upwardflag=0;
                	downflag=0;
                	rightflag=1;
                	leftflag=0;
                	completeflag=0;
                	rightflagrot++;
                	textx+=0.75;
                    if(rightflagrot%2==1)
                    {
                        texty=-0.25;
                        if(leftangle==0)
                            angle=0;
                        else
                            angle=90;
                    }	
                    else
                    {
                        texty=0;
                        if(leftangle==90)
                            angle=90;
                        else
                            angle=0;
                    }
                }
                break;
            case GLFW_KEY_DOWN:
            	if(downflag==0 && upwardflag==0&&rightflag==0&&leftflag==0 || completeflag==1 )
            	{
                	upwardflag=0;
                	downflag=1;
                	rightflag=0;
                	leftflag=0;
                	completeflag=0;
            	}
                break;
            case GLFW_KEY_LEFT:
            	if(downflag==0 && upwardflag==0&&rightflag==0&&leftflag==0 || completeflag==1)
            	{
                	upwardflag=0;
                	downflag=0;
                	rightflag=0;
                	leftflag=1;
                	 leftflagrot++;
                    textx-=0.75;
                    if(leftflagrot%2==1)
                    {
                        texty=-0.25;
                        if(angle==0)
                            leftangle=0;
                        else
                            leftangle=90;
                        
                    }
                    else
                    {
                        texty=0;
                        if(angle==0)
                            leftangle=0;
                        else
                            leftangle=90;
                    }
            	}
                break;
            case GLFW_KEY_UP:
            	if(downflag==0 && upwardflag==0&&rightflag==0&&leftflag==0 || completeflag==1)
            	{
                	upwardflag=1;
                	downflag=0;
                	rightflag=0;
                	leftflag=0;
                	completeflag=0;
                	angle=0;
            	}
                break;
            case GLFW_KEY_C:
            	sideflag=1;
                rectangle_rot_status+=90;
                break;
            case GLFW_KEY_F:
                rectangle_rot_status-=90;
                break;
            case GLFW_KEY_P:
                triangle_rot_status = !triangle_rot_status;
                break;
            case GLFW_KEY_X:
                rectangle_next_rot+=90;
                break;
            default:
                break;
        }
    }
    else if (action == GLFW_PRESS) {
        switch (key) {
            case GLFW_KEY_ESCAPE:
                quit(window);
                break;
            default:
                break;
        }
    }
}

/* Executed for character input (like in text boxes) */
void keyboardChar (GLFWwindow* window, unsigned int key)
{
	switch (key) {
		case 'Q':
		case 'q':
            quit(window);
            break;
		default:
			break;
	}
}

/* Executed when a mouse button is pressed/released */
void mouseButton (GLFWwindow* window, int button, int action, int mods)
{
    switch (button) {
        case GLFW_MOUSE_BUTTON_LEFT:
            if (action == GLFW_RELEASE)
                triangle_rot_dir *= -1;
            break;
        case GLFW_MOUSE_BUTTON_RIGHT:
            if (action == GLFW_RELEASE) {
                rectangle_rot_dir *= -1;
            }
            break;
        default:
            break;
    }
}


/* Executed when window is resized to 'width' and 'height' */
/* Modify the bounds of the screen here in glm::ortho or Field of View in glm::Perspective */
void reshapeWindow (GLFWwindow* window, int width, int height)
{
    int fbwidth=width, fbheight=height;
    /* With Retina display on Mac OS X, GLFW's FramebufferSize
     is different from WindowSize */
    glfwGetFramebufferSize(window, &fbwidth, &fbheight);

	GLfloat fov = 90.0f;

	// sets the viewport of openGL renderer
	glViewport (0, 0, (GLsizei) fbwidth, (GLsizei) fbheight);

	// set the projection matrix as perspective
	/* glMatrixMode (GL_PROJECTION);
	   glLoadIdentity ();
	   gluPerspective (fov, (GLfloat) fbwidth / (GLfloat) fbheight, 0.1, 500.0); */
	// Store the projection matrix in a variable for future use
    // Perspective projection for 3D views
    // Matrices.projection = glm::perspective (fov, (GLfloat) fbwidth / (GLfloat) fbheight, 0.1f, 500.0f);

    // Ortho projection for 2D views
    Matrices.projection = glm::ortho(-4.0f, 4.0f, -4.0f, 4.0f, 0.1f, 1000.0f);
}

VAO *triangle, *rectangle,*rectangle1, *rectangle2,*rectangle3, *board ;

// Creates the triangle object used in this sample code
void createTriangle ()
{
  /* ONLY vertices between the bounds specified in glm::ortho will be visible on screen */

  /* Define vertex array as used in glBegin (GL_TRIANGLES) */
  static const GLfloat vertex_buffer_data [] = {
    0, 1,0, // vertex 0
    -1,-1,0, // vertex 1
    1,-1,0, // vertex 2
  };

  static const GLfloat color_buffer_data [] = {
    1,0,0, // color 0
    0,1,0, // color 1
    0,0,1, // color 2
  };

  // create3DObject creates and returns a handle to a VAO that can be used later
  triangle = create3DObject(GL_TRIANGLES, 3, vertex_buffer_data, color_buffer_data, GL_LINE);
}

// Creates the rectangle object used in this sample code

void createboard(string s)
{
	float a[108];
	 static const GLfloat vertex_buffer_data [] = {
     0,0,0,
    0,0.5,0,
    0,0,0.1,
    0,0.5,0,
    0,0.5,0.1,
    0,0,0.1,

    -0.5,0.5,0,
    0,0.5,0,
    -0.5,0,0,
    0,0,0,
    0,0.5,0,
    -0.5,0,0,
    
    -0.5,0.5,0.1,
    -0.5,0.5,0,
    -0.5,0,0,
    -0.5,0.5,0.1,
    -0.5,0,0,
    -0.5,0,0.1,
    
    0,0.5,0.1,
    -0.5,0.5,0.1,
    -0.5,0,0.1,
    -0.5,0,0.1,
    0,0,0.1,
    0,0.5,0.1,
    
    0,0.5,0,
    0,0.5,0.1,
    -0.5,0.5,0.1,
    -0.5,0.5,0.1,
    -0.5,0.5,0,
    0,0.5,0,
    
    0,0,0,
    -0.5,0,0,
    -0.5,0,0.1,
    -0.5,0,0.1,
    0,0,0.1,
    0,0,0
  };
	
  for(int i=0;i<108;i++)
  {
  		a[i]=0;
  }
  for(int i=3*18;i<4*18;i++)
  {
  	if(i%3==0)
  		a[i]=1;
  	if(i%15==0)
  		a[i]=0;
  	if(i==3*18+9)
  		a[i]=0;

  }
  board = create3DObject(GL_TRIANGLES, 36, vertex_buffer_data, a , GL_FILL);
}

void createRectangle ()
{
  // GL3 accepts only Triangles. Quads are not supported
	float a[108];
  static const GLfloat vertex_buffer_data [] = {
    -0.5,-0.25,-0.25,
    -0.5,0.25,-0.25,
    -0.5,-0.25,0.25,
    -0.5,0.25,-0.25,
    -0.5,0.25,0.25,
    -0.5,-0.25,0.25,

    0.5,0.25,-0.25,
    -0.5,0.25,-0.25,
    0.5,-0.25,-0.25,
    -0.5,-0.25,-0.25,
    -0.5,0.25,-0.25,
    0.5,-0.25,-0.25,
    
    0.5,0.25,0.25,
    0.5,0.25,-0.25,
    0.5,-0.25,-0.25,
    0.5,0.25,0.25,
    0.5,-0.25,-0.25,
    0.5,-0.25,0.25,
    
    -0.5,0.25,0.25,
    0.5,0.25,0.25,
    0.5,-0.25,0.25,
    0.5,0,0.25,
    -0.5,-0.25,0.25,
    -0.5,0.25,0.25,
    
    -0.5,0.25,-0.25,
    -0.5,0.25,0.25,
    0.5,0.25,0.25,
    0.5,0.25,0.25,
    0.5,0.25,-0.25,
    -0.5,0.25,-0.25,
    
    -0.5,-0.25,-0.25,    
    0.5,-0.25,-0.25,
    0.5,-0.25,0.25,
    0.5,-0.25,0.25,
    -0.5,-0.25,0.25,
    -0.5,-0.25,-0.25
  };
  static const GLfloat vertex_buffer_data1 [] = {
    -0.5,-0.25,-0.25,
    -0.5,0.25,-0.25,
    -0.5,-0.25,0.25,
    -0.5,0.25,-0.25,
    -0.5,0.25,0.25,
    -0.5,-0.25,0.25,

    0.5,0.25,-0.25,
    -0.5,0.25,-0.25,
    0.5,-0.25,-0.25,
    -0.5,-0.25,-0.25,
    -0.5,0.25,-0.25,
    0.5,-0.25,-0.25,
    
    0.5,0.25,0.25,
    0.5,0.25,-0.25,
    0.5,-0.25,-0.25,
    0.5,0.25,0.25,
    0.5,-0.25,-0.25,
    0.5,-0.25,0.25,
    
    -0.5,0.25,0.25,
    0.5,0.25,0.25,
    0.5,-0.25,0.25,
    0.5,-0.25,0.25,
    -0.5,-0.25,0.25,
    -0.5,0.25,0.25,
    
    -0.5,0.25,-0.25,
    -0.5,0.25,0.25,
    0.5,0.25,0.25,
    0.5,0.25,0.25,
    0.5,0.25,-0.25,
    -0.5,0.25,-0.25,
    
    -0.5,-0.25,-0.25,    
    0.5,-0.25,-0.25,
    0.5,-0.25,0.25,
    0.5,-0.25,0.25,
    -0.5,-0.25,0.25,
    -0.5,-0.25,-0.25
  };

  static const GLfloat vertex_buffer_data2 [] = {
    -0.25,-0.5,-0.25,
    -0.25,0.5,-0.25,
    -0.25,-0.5,0.25,
    -0.25,0.5,-0.25,
    -0.25,0.5,0.25,
    -0.25,-0.5,0.25,

    0.25,0.5,-0.25,
    -0.25,0.5,-0.25,
    0.25,-0.5,-0.25,
    -0.25,-0.5,-0.25,
    -0.25,0.5,-0.25,
    0.25,-0.5,-0.25,
    
    0.25,0.5,0.25,
    0.25,0.5,-0.25,
    0.25,-0.5,-0.25,
    0.25,0.5,0.25,
    0.25,-0.5,-0.25,
    0.25,-0.5,0.25,
    
    -0.25,0.5,0.25,
    0.25,0.5,0.25,
    0.25,-0.5,0.25,
    0.25,0,0.25,
    -0.25,-0.5,0.25,
    -0.25,0.5,0.25,
    
    -0.25,0.5,-0.25,
    -0.25,0.5,0.25,
    0.25,0.5,0.25,
    0.25,0.5,0.25,
    0.25,0.5,-0.25,
    -0.25,0.5,-0.25,
    
    -0.25,-0.5,-0.25,    
    0.25,-0.5,-0.25,
    0.25,-0.5,0.25,
    0.25,-0.5,0.25,
    -0.25,-0.5,0.25,
    -0.25,-0.5,-0.25
  };
  static const GLfloat vertex_buffer_data3 [] = {
    -0.25,-0.25,-0.5,
    -0.25,0.25,-0.5,
    -0.25,-0.25,0.5,
    -0.25,0.25,-0.5,
    -0.25,0.25,0.5,
    -0.25,-0.25,0.5,

    0.25,0.25,-0.5,
    -0.25,0.25,-0.5,
    0.25,-0.25,-0.5,
    -0.25,-0.25,-0.5,
    -0.25,0.25,-0.5,
    0.25,-0.25,-0.5,
    
    0.25,0.25,0.5,
    0.25,0.25,-0.5,
    0.25,-0.25,-0.5,
    0.25,0.25,0.5,
    0.25,-0.25,-0.5,
    0.25,-0.25,0.5,
    
    -0.25,0.25,0.5,
    0.25,0.25,0.5,
    0.25,-0.25,0.5,
    0.25,-0.25,0.5,
    -0.25,-0.25,0.5,
    -0.25,0.25,0.5,
    
    -0.25,0.25,-0.5,
    -0.25,0.25,0.5,
    0.25,0.25,0.5,
    0.25,0.25,0.5,
    0.25,0.25,-0.5,
    -0.25,0.25,-0.5,
    
    -0.25,-0.25,-0.5,    
    0.25,-0.25,-0.5,
    0.25,-0.25,0.5,
    0.25,-0.25,0.5,
    -0.25,-0.25,0.5,
    -0.25,-0.25,-0.5
  };


  for(int i=0;i<108;i++)
  {
  	a[i]=(float) rand()/RAND_MAX;
  }
  static const GLfloat color_buffer_data [] = {

    
  };

  // create3DObject creates and returns a handle to a VAO that can be used later
  rectangle = create3DObject(GL_TRIANGLES, 36, vertex_buffer_data, a, GL_FILL);
  rectangle3 = create3DObject(GL_TRIANGLES, 36, vertex_buffer_data1, a, GL_FILL);
  rectangle1  = create3DObject(GL_TRIANGLES, 36, vertex_buffer_data2 , a, GL_FILL);
  rectangle2  = create3DObject(GL_TRIANGLES, 36, vertex_buffer_data3 , a, GL_FILL);
}

float camera_rotation_angle = 90;
float rectangle_rotation = 0;
float triangle_rotation = 0;

/* Render the scene with openGL */
/* Edit this function according to your assignment */
void draw (string s)
{
  // clear the color and depth in the frame buffer
  glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

  // use the loaded shader program
  // Don't change unless you know what you are doing
  glUseProgram (programID);

  // Eye - Location of camera. Don't change unless you are sure!!
  glm::vec3 eye ( 5*cos(camera_rotation_angle*M_PI/180.0f), 7, 5*sin(camera_rotation_angle*M_PI/180.0f) );
  // Target - Where is the camera looking at.  Don't change unless you are sure!!
  glm::vec3 target (0, 0, 0);
  // Up - Up vector defines tilt of camera.  Don't change unless you are sure!!
  glm::vec3 up (0, 0, 1);

  // Compute Camera matrix (view)
   Matrices.view = glm::lookAt( eye, target, up ); // Rotating Camera for 3D
  //  Don't change unless you are sure!!
 // Matrices.view = glm::lookAt(glm::vec3(0,0,3), glm::vec3(0,0,0), glm::vec3(0,1,0)); // Fixed camera for 2D (ortho) in XY plane
 //  Matrices.view = glm::lookAt(glm::vec3(-20,-20,20), glm::vec3(0,0,0), glm::vec3(1,1,1));

  // Compute ViewProject matrix as view/camera might not be changed for this frame (basic scenario)
  //  Don't change unless you are sure!!
  glm::mat4 VP = Matrices.projection * Matrices.view;

  // Send our transformation to the currently bound shader, in the "MVP" uniform
  // For each model you render, since the MVP will be different (at least the M part)
  //  Don't change unless you are sure!!
  glm::mat4 MVP;	// MVP = Projection * View * Model

  // Load identity to model matrix

  /* Render your scene */
  cout<<angle<< " "<<leftangle<<endl;
  if(downflag==0 && upwardflag==0&&rightflag==0&&leftflag==0)
  {
  	Matrices.model = glm::mat4(1.0f);
	glm::mat4 translateRectangle = glm::translate (glm::vec3(0, 0, 0));        // glTranslatef
  	glm::mat4 rotateRectangle = glm::rotate((float)(angle *M_PI/180.0f), glm::vec3(1,0,0));
  	glm::mat4 translateRectangle2 = glm::translate (glm::vec3(-0.5, -0.25, 0.25)); // rotate about vector (-1,1,1)
  	Matrices.model *= (translateRectangle * rotateRectangle *translateRectangle2);// *rotateRectangle1);
  	MVP = VP * Matrices.model;
  	glUniformMatrix4fv(Matrices.MatrixID, 1, GL_FALSE, &MVP[0][0]);
	//draw3DObject(rectangle);
	draw3DObject(rectangle3);
  }
  else if(rightflag==1)
  {
  	Matrices.model = glm::mat4(1.0f);
  	glm::mat4 translateRectangle;
  	glm::mat4 rotateRectangle;
  	glm::mat4 translateRectangle1;
  	glm::mat4 rotateRectangle1;
    glm::mat4 translateRectangle2;
    glm::mat4 translateRectangle3;
    cout<<textx<<endl;
  	if(rightflagrot%2==1)
  	{
		translateRectangle = glm::translate (glm::vec3(1*(textx+0.25), 1*(texty+0.5), -0.25));        // glTranslatef
  		rotateRectangle = glm::rotate((float)(angle *M_PI/180.0f), glm::vec3(0,-1,0));
		translateRectangle = glm::translate (glm::vec3(-1*(textx+0.25), -1*(texty+0.5), 0.25)); 
        translateRectangle2 = glm::translate (glm::vec3(0.35, -0, 0.25)); 
  		//cout<<"hi"<<endl;
  	}
  	else if(rightflagrot%2==0)
  	{
		translateRectangle = glm::translate (glm::vec3(1*(textx+0.5), 1*(texty+0.25), -0.25));        // glTranslatef
  		rotateRectangle = glm::rotate((float)(angle*M_PI/180.0f), glm::vec3(0,-1,0)); // rotate about vector (-1,1,1)  		
		translateRectangle = glm::translate (glm::vec3(-1*(textx+0.5), -1*(texty+0.25), 0.25));        // glTranslatef
  	    translateRectangle2 = glm::translate (glm::vec3(0, -0, 0)); // rotate about vector (-1,1,1)
    }
  	Matrices.model *= (translateRectangle * rotateRectangle *translateRectangle1*translateRectangle2);
  	MVP = VP * Matrices.model;
  	glUniformMatrix4fv(Matrices.MatrixID, 1, GL_FALSE, &MVP[0][0]);
	draw3DObject(rectangle3);
	//cout<<angle<<" "<<rightflagrot<< endl;
    if(rightflagrot%2==1)
    {
	if(angle!=90)
  		angle+=45;
  	else
  	{
  		
  		if(completeflag==0)
  		{
  			//;
  		}
  		completeflag=1;
  	}
  }
  else
  {
    if(angle!=180)
        angle+=90;
    else
    {
        
        if(completeflag==0)
        {
            //;
        }
        completeflag=1;
        upwardflag_flag=0;
    }
  }
  }
  else if(leftflag==1)
  {
    Matrices.model = glm::mat4(1.0f);
    glm::mat4 translateRectangle;
    glm::mat4 rotateRectangle;
    glm::mat4 translateRectangle1;
    glm::mat4 rotateRectangle1;
    glm::mat4 translateRectangle2;
    glm::mat4 translateRectangle3;
  	if(leftflagrot%2==1)
    {
        translateRectangle = glm::translate (glm::vec3(1*(textx+0.25), 1*(texty+0.5), -0.25));        // glTranslatef
        rotateRectangle = glm::rotate((float)(leftangle *M_PI/180.0f), glm::vec3(0,-1,0));
        translateRectangle = glm::translate (glm::vec3(-1*(textx+0.25), -1*(texty+0.5), 0.25)); 
        translateRectangle2 = glm::translate (glm::vec3(0.35, -0, 0.25)); 
        //cout<<"hi"<<endl;
    }
    else if(leftflagrot%2==0)
    {
        translateRectangle = glm::translate (glm::vec3(1*(textx+0.5), 1*(texty+0.25), -0.25));        // glTranslatef
        rotateRectangle = glm::rotate((float)(leftangle*M_PI/180.0f), glm::vec3(0,-1,0)); // rotate about vector (-1,1,1)       
        translateRectangle = glm::translate (glm::vec3(-1*(textx+0.5), -1*(texty+0.25), 0.25));        // glTranslatef
        translateRectangle2 = glm::translate (glm::vec3(0, -0, 0)); // rotate about vector (-1,1,1)
    }
    Matrices.model *= (translateRectangle * rotateRectangle *translateRectangle1*translateRectangle2);
    MVP = VP * Matrices.model;
    glUniformMatrix4fv(Matrices.MatrixID, 1, GL_FALSE, &MVP[0][0]);
    draw3DObject(rectangle3);
    //cout<<angle<<" "<<rightflagrot<< endl;
    if(leftflagrot%2==1)
    {
    if(leftangle!=90)
        leftangle+=90;
    else
    {
        
        if(completeflag==0)
        {
            //;
        }
        completeflag=1;
    }
  }
  else
  {
    if(leftangle!=180)
        leftangle+=90;
    else
    {
        
        if(completeflag==0)
        {
            //;
        }
        completeflag=1;
    }
  }
  }
  for(int i=0;i<10;i++)
  {
  	for(int j=0;j<10;j++)
  	{
  		 Matrices.model = glm::mat4(1.0f);
		 glm::mat4 translateRectangle = glm::translate (glm::vec3(0.5*(5-i), 0.5*(5-j), 0));        // glTranslatef
	 	 glm::mat4 rotateRectangle = glm::rotate((float)(0*M_PI/180.0f), glm::vec3(0,1,0)); // rotate about vector (-1,1,1)
	 	 Matrices.model *= (translateRectangle * rotateRectangle);// *rotateRectangle1);
	 	 MVP = VP * Matrices.model;
		 glUniformMatrix4fv(Matrices.MatrixID, 1, GL_FALSE, &MVP[0][0]);
		 draw3DObject(board);
  	}
  }



  // Increment angles
  float increments = 1;
  sideflag=0;
  //camera_rotation_angle++; // Simulating camera rotation
  triangle_rotation = triangle_rotation + increments*triangle_rot_dir*triangle_rot_status;
  rectangle_rotation = rectangle_rotation + increments*rectangle_rot_dir*rectangle_rot_status;
}

/* Initialise glfw window, I/O callbacks and the renderer to use */
/* Nothing to Edit here */
GLFWwindow* initGLFW (int width, int height)
{
    GLFWwindow* window; // window desciptor/handle

    glfwSetErrorCallback(error_callback);
    if (!glfwInit()) {
//        exit(EXIT_FAILURE);
    }

    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    window = glfwCreateWindow(width, height, "Sample OpenGL 3.3 Application", NULL, NULL);

    if (!window) {
        glfwTerminate();
//        exit(EXIT_FAILURE);
    }

    glfwMakeContextCurrent(window);
    gladLoadGLLoader((GLADloadproc) glfwGetProcAddress);
    glfwSwapInterval( 1 );

    /* --- register callbacks with GLFW --- */

    /* Register function to handle window resizes */
    /* With Retina display on Mac OS X GLFW's FramebufferSize
     is different from WindowSize */
    glfwSetFramebufferSizeCallback(window, reshapeWindow);
    glfwSetWindowSizeCallback(window, reshapeWindow);

    /* Register function to handle window close */
    glfwSetWindowCloseCallback(window, quit);

    /* Register function to handle keyboard input */
    glfwSetKeyCallback(window, keyboard);      // general keyboard input
    glfwSetCharCallback(window, keyboardChar);  // simpler specific character handling

    /* Register function to handle mouse click */
    glfwSetMouseButtonCallback(window, mouseButton);  // mouse button clicks

    return window;
}

/* Initialize the OpenGL rendering properties */
/* Add all the models to be created here */
void initGL (GLFWwindow* window, int width, int height)
{
    /* Objects should be created before any other gl function and shaders */
	// Create the models
	createTriangle (); // Generate the VAO, VBOs, vertices data & copy into the array buffer
	createRectangle ();
	createboard(s);
	
	// Create and compile our GLSL program from the shaders
	programID = LoadShaders( "Sample_GL.vert", "Sample_GL.frag" );
	// Get a handle for our "MVP" uniform
	Matrices.MatrixID = glGetUniformLocation(programID, "MVP");

	
	reshapeWindow (window, width, height);

    // Background color of the scene
	glClearColor (0.0f, 0.0f, 0.0f, 0.0f); // R, G, B, A
	glClearDepth (1.0f);

	glEnable (GL_DEPTH_TEST);
	glDepthFunc (GL_LEQUAL);

}

int main (int argc, char** argv)
{
	int width = 1000;
	int height = 2000;

    GLFWwindow* window = initGLFW(width, height);

	initGL (window, width, height);

    double last_update_time = glfwGetTime(), current_time;
    s="SSS";

    /* Draw in loop */
    while (!glfwWindowShouldClose(window)) {

        // OpenGL Draw commands
        draw(s);

        // Swap Frame Buffer in double buffering
        glfwSwapBuffers(window);

        // Poll for Keyboard and mouse events
        glfwPollEvents();

        // Control based on time (Time based transformation like 5 degrees rotation every 0.5s)
        current_time = glfwGetTime(); // Time in seconds
        if ((current_time - last_update_time) >= 0.5) { // atleast 0.5s elapsed since last frame
            // do something every 0.5 seconds ..
            last_update_time = current_time;
        }
    }

    glfwTerminate();
//    exit(EXIT_SUCCESS);
}
